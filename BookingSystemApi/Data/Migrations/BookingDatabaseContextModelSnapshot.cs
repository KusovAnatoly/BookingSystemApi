// <auto-generated />
using System;
using BookingSystemApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingSystemApi.Data.Migrations
{
    [DbContext(typeof(BookingDatabaseContext))]
    partial class BookingDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingSystemApi.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("RecurringId")
                        .HasColumnType("integer")
                        .HasColumnName("recurring_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("booking_pkey");

                    b.HasIndex("RecurringId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("booking", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.BookingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("booking_log_pkey");

                    b.HasIndex("BookingId");

                    b.HasIndex("ChangedBy");

                    b.ToTable("booking_log", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("feature_pkey");

                    b.HasIndex(new[] { "Name" }, "feature_name_key")
                        .IsUnique();

                    b.ToTable("feature", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("notification_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.RecurringBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Frequency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("frequency");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("recurring_booking_pkey");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("recurring_booking", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex(new[] { "Name" }, "role_name_key")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("room_pkey");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.RoomSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("room_schedule_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("room_schedule", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("RoomFeature", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.HasKey("RoomId", "FeatureId")
                        .HasName("room_feature_pkey");

                    b.HasIndex("FeatureId");

                    b.ToTable("room_feature", (string)null);
                });

            modelBuilder.Entity("BookingSystemApi.Models.Booking", b =>
                {
                    b.HasOne("BookingSystemApi.Models.RecurringBooking", "Recurring")
                        .WithMany("Bookings")
                        .HasForeignKey("RecurringId")
                        .HasConstraintName("booking_recurring_id_fkey");

                    b.HasOne("BookingSystemApi.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("booking_room_id_fkey");

                    b.HasOne("BookingSystemApi.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("booking_user_id_fkey");

                    b.Navigation("Recurring");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystemApi.Models.BookingLog", b =>
                {
                    b.HasOne("BookingSystemApi.Models.Booking", "Booking")
                        .WithMany("BookingLogs")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("booking_log_booking_id_fkey");

                    b.HasOne("BookingSystemApi.Models.User", "ChangedByNavigation")
                        .WithMany("BookingLogs")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("booking_log_changed_by_fkey");

                    b.Navigation("Booking");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("BookingSystemApi.Models.Notification", b =>
                {
                    b.HasOne("BookingSystemApi.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notification_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystemApi.Models.RecurringBooking", b =>
                {
                    b.HasOne("BookingSystemApi.Models.Room", "Room")
                        .WithMany("RecurringBookings")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("recurring_booking_room_id_fkey");

                    b.HasOne("BookingSystemApi.Models.User", "User")
                        .WithMany("RecurringBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("recurring_booking_user_id_fkey");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystemApi.Models.RoomSchedule", b =>
                {
                    b.HasOne("BookingSystemApi.Models.Room", "Room")
                        .WithMany("RoomSchedules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("room_schedule_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingSystemApi.Models.User", b =>
                {
                    b.HasOne("BookingSystemApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoomFeature", b =>
                {
                    b.HasOne("BookingSystemApi.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_feature_feature_id_fkey");

                    b.HasOne("BookingSystemApi.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_feature_room_id_fkey");
                });

            modelBuilder.Entity("BookingSystemApi.Models.Booking", b =>
                {
                    b.Navigation("BookingLogs");
                });

            modelBuilder.Entity("BookingSystemApi.Models.RecurringBooking", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingSystemApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingSystemApi.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RecurringBookings");

                    b.Navigation("RoomSchedules");
                });

            modelBuilder.Entity("BookingSystemApi.Models.User", b =>
                {
                    b.Navigation("BookingLogs");

                    b.Navigation("Bookings");

                    b.Navigation("Notifications");

                    b.Navigation("RecurringBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
